# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: ['main']
  #pull_request:
  #branches: ['main']

env:
  AWS_REGION: eu-north-1                                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: shopme-ts                               # set this to your Amazon ECR repository name
  ECS_SERVICE: shome-ts-service                           # set this to your Amazon ECS service name
  ECS_CLUSTER: shopme-ts-cluster1                         # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json               # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: shopme-ts-container                     # set this to the name of the container in the

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci

        # install dependencies
      - run: npm install
        name: Install Packages

      # check file format - prettier(ignore warning)
      - run: npm run format:check
        name: Check File Format Errors

      # fix file format - prettier(ignore warning)
      - run: npm run format:fix
        name: Fix File Format Errors

      # check file format & code syntax - elint(ignore warning)
      - run: npm run lint:check
        name: Check Lint Errors

      # fix code tyle & syntax - elint(ignore warning)
      - run: npm run lint:fix
        name: Check Lint Errors

      # run unit and integration test - jest and rtl
      - run: npm test
        name: Unit and Integration Tests

      # run production build
      - run: CI='' npm run build -- --profile
        name: Create Production Build

      # run e2e test - cypress
      - name: E2E Test
        uses: cypress-io/github-action@v4
        with:
          spec: cypress/e2e/tests/*.cy.ts
          start: npm start # run server from production build
          browser: chrome

      # build and push docker image
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: navidansari/shopme-ts
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          IMAGE_TAG: ${{ github.sha }}                                #shopme-ts_image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
